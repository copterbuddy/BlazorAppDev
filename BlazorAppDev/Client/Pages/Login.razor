@page "/login"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Blazored.FluentValidation
@using System.Security.Claims
@inject IJSRuntime JSRuntime;
@inject HttpClient Http

<PageTitle>Login</PageTitle>

<div>
    <h1 class="display-3">Login</h1>
</div>
<hr />
@*<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">*@
<EditForm Model="@req" OnSubmit="@HandleValidSubmit">
    @*<DataAnnotationsValidator />*@
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <ValidationSummary class="text-danger-email span.text-danger-email ui.text-danger-email" />

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <input type="text" class="form-control" id="email" @bind="@req.Email" placeholder="name@example.com">
        <ValidationMessage For="@(() => req.Email)" class="text-danger-email span.text-danger-emai ui.text-danger-email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" @bind="@req.Password" placeholder="Password">
        <ValidationMessage For="@(() => req.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<AuthorizeView Roles="Admin">
    <Authorized>
        The user: @context.User.FindFirst(ClaimTypes.Name).Value is authorized
    </Authorized>
    <NotAuthorized>
        The User is not authorized
    </NotAuthorized>
</AuthorizeView>

@code {

    private FluentValidationValidator? _fluentValidationValidator;
    private LoginRequest req = new LoginRequest();
    private LoginResponse res;

    //public async Task HandleSubmit()
    //{
    //    await JSRuntime.InvokeVoidAsync("consoleLog", $"email: {loginModel.Email},password: {loginModel.Password}");
    //}

    private async Task HandleValidSubmit()
    {

        if (await _fluentValidationValidator!.ValidateAsync())
        {
            try
            {
                var result = await Http.PostAsJsonAsync<LoginRequest>("User/Login", req);
                if (result.IsSuccessStatusCode)
                {
                    res = await result.Content.ReadFromJsonAsync<LoginResponse>();
                    if (res is not null)
                    {
                        Console.WriteLine("token is : " + res.Token);
                    }
                    
                }

            }
            catch (Exception e)
            {
                Console.WriteLine("error is : " + e);
                throw;
            }
        }

        // Handle form submit when validation passed
    }

}
